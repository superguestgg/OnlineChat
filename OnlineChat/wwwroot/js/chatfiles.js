
function uint8ToBase64(u8Arr) {
    const CHUNK_SIZE = 0x8000; // 32kb chunks
    let index = 0;
    const length = u8Arr.length;
    let result = '';
    let slice;
    while (index < length) {
        slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
        result += String.fromCharCode.apply(null, slice);
        index += CHUNK_SIZE;
    }
    return btoa(result);
}

async function sendFile(file, fileName = null) {
    let sentBytes = 0;
    if (fileName == null) {
        fileName = file.name;
    }

    const fileId = crypto.randomUUID(); // –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    const chunkSize = 64 * 1024;
    const fileSize = file.size;
    console.log(fileSize)
    let offset = 0;

    fileInfo.style.display = "block";
    fileNameLabel.textContent = fileName;
    fileProgress.value = 0;
    filePercent.textContent = "0%";
    const observable = createFileObservable(file, chunkSize);

    await connection.stream("StreamFile", chatData.roomId, fileId, fileName, observable)
        .subscribe({
            next: chunk => {
                sentBytes += chunk;

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                const percent = Math.floor((sentBytes / fileSize) * 100);
                fileProgress.value = percent;
                filePercent.textContent = percent + "%";

                console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–∞–Ω–∫:", chunk);
            }, complete: () => {
                console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                fileInput.value = "";
                fileInfo.style.display = "none";
                fileProgress.value = 0;
                filePercent.textContent = "0%";
                addMessage('System', `–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ${fileName} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, 'system')
            }, error: err => {
                console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err);
            }
        });
    console.log("sfeeg");
}

function bigIntToUint8Array(bigint, length = 32) {
    let hex = bigint.toString(16);
    if (hex.length % 2) hex = '0' + hex;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–π—Ç—ã
    let bytes = [];
    for (let i = 0; i < hex.length; i += 2) {
        bytes.push(parseInt(hex.slice(i, i + 2), 16));
    }

    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω–µ
    if (bytes.length > length) {
        bytes = bytes.slice(-length); // –±–µ—Ä—ë–º –º–ª–∞–¥—à–∏–µ –±–∞–π—Ç—ã
    } else if (bytes.length < length) {
        const padding = new Array(length - bytes.length).fill(0);
        bytes = padding.concat(bytes); // –¥–æ–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–≤–∞ –Ω—É–ª—è–º–∏
    }

    return new Uint8Array(bytes);
}


async function importAesKey(keyMaterial) {
    return await crypto.subtle.importKey(
        "raw",
        keyMaterial,
        { name: "AES-GCM" },
        false,
        ["encrypt", "decrypt"]
    );
}

async function getDecryptionKey() {
    const dhKeys = JSON.parse(sessionStorage.getItem('diffieHellmanSecret'));
    console.log(dhKeys)
    if (!dhKeys) {
        throw new Error("–ó–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }
    const keyMaterial = bigIntToUint8Array(dhKeys);
    

    const rawKey = bigIntToUint8Array(BigInt(dhKeys));
    console.log(keyMaterial)
    console.log(rawKey)
    return await importAesKey(keyMaterial);
}

async function encryptChunk(key, dataBuffer) {
    const iv = crypto.getRandomValues(new Uint8Array(12)); // 12 –±–∞–π—Ç IV
    const encrypted = await crypto.subtle.encrypt(
        { name: "AES-GCM", iv: iv },
        key,
        dataBuffer
    );

    // –°–∫–ª–µ–∏–≤–∞–µ–º IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const result = new Uint8Array(iv.byteLength + encrypted.byteLength);
    result.set(iv, 0);
    result.set(new Uint8Array(encrypted), iv.byteLength);
    return result;
}

async function decryptChunk(aesKey, chunk) {
    const iv = chunk.slice(0, 12); // –ø–µ—Ä–≤—ã–µ 12 –±–∞–π—Ç ‚Äî IV
    const data = chunk.slice(12);

    return new Uint8Array(await crypto.subtle.decrypt(
        {
            name: "AES-GCM",
            iv: iv,
        },
        aesKey,
        data
    ));
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CryptoKey –∏–∑ Uint8Array
async function importAesKeyFromBigInt(bigint) {
    const keyBytes = bigIntToUint8Array(bigint);
    return await crypto.subtle.importKey(
        "raw",
        keyBytes,
        "AES-GCM",
        false,
        ["encrypt", "decrypt"]
    );
}

// üß™ –¢–ï–°–¢
(async () => {
    const secret = 12345678901234567890n; // BigInt (–º–æ–∂–Ω–æ –∏–∑ DH)
    const key = await importAesKeyFromBigInt(secret);

    const originalText = "Hello, encrypted world! üîí";
    const plainBytes = new TextEncoder().encode(originalText);

    const encryptedChunk = await encryptChunk(key, plainBytes);
    const decryptedChunk = await decryptChunk(key, encryptedChunk);

    const decryptedText = new TextDecoder().decode(decryptedChunk);

    console.log("Original:", originalText);
    console.log("Decrypted:", decryptedText);
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ:", originalText === decryptedText);
})();

async function sendEncryptedFile(file, fileName = null) {
    let sentBytes = 0;
    if (fileName == null) {
        fileName = file.name;
    }
    const dhKeys = JSON.parse(sessionStorage.getItem('diffieHellmanSecret'));
    const fileNameEncrypted = await encryptMessage(fileName, dhKeys);

    const fileId = crypto.randomUUID(); // –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    const chunkSize = 64 * 1024;
    const fileSize = file.size;
    console.log(fileSize)
    let offset = 0;

    fileInfo.style.display = "block";
    fileNameLabel.textContent = fileName;
    fileProgress.value = 0;
    filePercent.textContent = "0%";

    
    const aesKey = await getDecryptionKey();
    // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    const observable = createObservableFromEncryptedFile(file, aesKey, chunkSize);
    
    await connection.stream("StreamFile", chatData.roomId, fileId, fileNameEncrypted, observable)
        .subscribe({
            next: chunk => {
                sentBytes += chunk;

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                const percent = Math.floor((sentBytes / fileSize) * 100);
                fileProgress.value = percent;
                filePercent.textContent = percent + "%";

                console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–∞–Ω–∫:", chunk);
            }, complete: () => {
                console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                fileInput.value = "";
                fileInfo.style.display = "none";
                fileProgress.value = 0;
                filePercent.textContent = "0%";
                addMessage('System', `–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ${fileName} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, 'system')
            }, error: err => {
                console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err);
            }
        });
    console.log("sfeeg");
}

function createDownloadProgressUI(fileName, userName) {
    const container = document.createElement("div");
    container.className = "file-download-progress";

    const label = document.createElement("div");
    label.textContent = `üì• –ü–æ–ª—É—á–µ–Ω–∏–µ: ${fileName} –æ—Ç ${userName}`;

    const progress = document.createElement("div");
    progress.textContent = "0 KB –∑–∞–≥—Ä—É–∂–µ–Ω–æ";

    container.appendChild(label);
    container.appendChild(progress);

    document.getElementById("messages").appendChild(container); // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π

    return {
        element: container, progress: progress
    };
}


function createVideoModal(titleText, mediaElement, onActionClick, isVideoRecording = false) {
    const modal = document.createElement("div");
    modal.style = `
        position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
        background: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        z-index: 1000; display: flex; flex-direction: column; align-items: center;
        max-width: 90vw; max-height: 90vh;
    `;

    const title = document.createElement("h3");
    title.textContent = titleText;
    modal.appendChild(title);

    mediaElement.style.maxWidth = "100%";
    mediaElement.style.borderRadius = "8px";
    modal.appendChild(mediaElement);

    const btn = document.createElement("button");
    btn.style.marginTop = "10px";
    btn.textContent = isVideoRecording ? "–ó–∞–ø–∏—Å–∞—Ç—å" : "–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ";
    btn.id = "record-btn";
    btn.onclick = () => {
        onActionClick();
        if (!isVideoRecording) modal.remove();
    };
    modal.appendChild(btn);

    const closeBtn = document.createElement("button");
    closeBtn.textContent = "–ó–∞–∫—Ä—ã—Ç—å";
    closeBtn.style.marginTop = "5px";
    closeBtn.onclick = () => {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (mediaElement.srcObject) {
            mediaElement.srcObject.getTracks().forEach(t => t.stop());
        }
        modal.remove();
    };
    modal.appendChild(closeBtn);

    return modal;
}

function createObservableFromEncryptedFile(file, aesKey, chunkSize = 64 * 1024) {
    return {
        subscribe: (observer)=> {
            let offset = 0;
            const fileSize = file.size;
            let cancelled = false;

            (async () => {
                try {
                    while (offset < fileSize && !cancelled) {
                        const chunk = file.slice(offset, offset + chunkSize);
                        const buffer = await chunk.arrayBuffer();
                        console.log("original", new Uint8Array(buffer));
                        const encryptedChunk = await encryptChunk(aesKey, buffer);
                        console.log("encryptedChunk", encryptedChunk);
                        observer.next(uint8ToBase64(encryptedChunk));
                        offset += chunkSize;
                    }

                    if (!cancelled) {
                        observer.complete();
                    }
                } catch (err) {
                    if (observer.error) {
                        observer.error(err);
                    } else {
                        console.error("Observable error:", err);
                    }
                }
            })();

            return {
                unsubscribe() {
                    cancelled = true;
                }
            };
        }
    };
}

function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü–∏—è: —Å–æ–∑–¥–∞—ë–º Observable, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —á–∞–Ω–∫–∞–º
function createFileObservable(file, chunkSize = 64 * 1024) {
    return {
        subscribe: (observer) => {
            const reader = new FileReader();
            let offset = 0;

            reader.onload = e => {
                if (e.target.error) {
                    observer.error(e.target.error);
                    return;
                }
                const chunk = new Uint8Array(e.target.result);
                observer.next(uint8ToBase64(chunk));
                offset += chunk.length;
                if (offset < file.size) {
                    readNextChunk();
                } else {
                    observer.complete();
                }
            };

            reader.onerror = e => observer.error(e.target.error);

            function readNextChunk() {
                const slice = file.slice(offset, offset + chunkSize);
                reader.readAsArrayBuffer(slice);
            }

            readNextChunk();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            return {
                unsubscribe: () => {
                    // –¢—É—Ç –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —á—Ç–µ–Ω–∏–µ, –Ω–æ FileReader –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É
                    // –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å.
                }
            };
        }
    };
}
